// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: fictions.sql

package database

import (
	"context"
	"database/sql"
)

const createFiction = `-- name: CreateFiction :one
INSERT INTO fictions (id, title, authorid, description, created_at, updated_at, published_at, published)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, title, authorid, description, created_at, updated_at, published_at, published
`

type CreateFictionParams struct {
	ID          string
	Title       string
	Authorid    string
	Description string
	CreatedAt   string
	UpdatedAt   string
	PublishedAt sql.NullString
	Published   int64
}

func (q *Queries) CreateFiction(ctx context.Context, arg CreateFictionParams) (Fiction, error) {
	row := q.db.QueryRowContext(ctx, createFiction,
		arg.ID,
		arg.Title,
		arg.Authorid,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.PublishedAt,
		arg.Published,
	)
	var i Fiction
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Authorid,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
		&i.Published,
	)
	return i, err
}

const deleteFiction = `-- name: DeleteFiction :exec
DELETE FROM fictions WHERE id = ?
`

func (q *Queries) DeleteFiction(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteFiction, id)
	return err
}

const getFictionById = `-- name: GetFictionById :one
SELECT id, title, authorid, description, created_at, updated_at, published_at, published FROM fictions WHERE id = ?
`

func (q *Queries) GetFictionById(ctx context.Context, id string) (Fiction, error) {
	row := q.db.QueryRowContext(ctx, getFictionById, id)
	var i Fiction
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Authorid,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
		&i.Published,
	)
	return i, err
}

const getFictionsByAuthorId = `-- name: GetFictionsByAuthorId :many
SELECT id, title, authorid, description, created_at, updated_at, published_at, published FROM fictions WHERE authorid = ? and published = 1
LIMIT ?
`

type GetFictionsByAuthorIdParams struct {
	Authorid string
	Limit    int64
}

func (q *Queries) GetFictionsByAuthorId(ctx context.Context, arg GetFictionsByAuthorIdParams) ([]Fiction, error) {
	rows, err := q.db.QueryContext(ctx, getFictionsByAuthorId, arg.Authorid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Fiction
	for rows.Next() {
		var i Fiction
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Authorid,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PublishedAt,
			&i.Published,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublishedFictions = `-- name: GetPublishedFictions :many
SELECT id, title, authorid, description, created_at, updated_at, published_at, published FROM fictions WHERE published = 1
LIMIT ?
`

func (q *Queries) GetPublishedFictions(ctx context.Context, limit int64) ([]Fiction, error) {
	rows, err := q.db.QueryContext(ctx, getPublishedFictions, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Fiction
	for rows.Next() {
		var i Fiction
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Authorid,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PublishedAt,
			&i.Published,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const publishFiction = `-- name: PublishFiction :one
UPDATE fictions SET published_at = ?, published = ? WHERE id = ? RETURNING id, title, authorid, description, created_at, updated_at, published_at, published
`

type PublishFictionParams struct {
	PublishedAt sql.NullString
	Published   int64
	ID          string
}

func (q *Queries) PublishFiction(ctx context.Context, arg PublishFictionParams) (Fiction, error) {
	row := q.db.QueryRowContext(ctx, publishFiction, arg.PublishedAt, arg.Published, arg.ID)
	var i Fiction
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Authorid,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
		&i.Published,
	)
	return i, err
}

const updateFiction = `-- name: UpdateFiction :one
UPDATE fictions SET updated_at = ?, title = ?, description = ?, id = ?
WHERE id = ? 
RETURNING id, title, authorid, description, created_at, updated_at, published_at, published
`

type UpdateFictionParams struct {
	UpdatedAt   string
	Title       string
	Description string
	ID          string
	ID_2        string
}

func (q *Queries) UpdateFiction(ctx context.Context, arg UpdateFictionParams) (Fiction, error) {
	row := q.db.QueryRowContext(ctx, updateFiction,
		arg.UpdatedAt,
		arg.Title,
		arg.Description,
		arg.ID,
		arg.ID_2,
	)
	var i Fiction
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Authorid,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PublishedAt,
		&i.Published,
	)
	return i, err
}
