// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, name, email, passwordhash, image_url)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, created_at, updated_at, name, email, passwordhash, image_url
`

type CreateUserParams struct {
	ID           string
	CreatedAt    string
	UpdatedAt    string
	Name         string
	Email        string
	Passwordhash string
	ImageUrl     sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Email,
		arg.Passwordhash,
		arg.ImageUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.Passwordhash,
		&i.ImageUrl,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, name, email, passwordhash, image_url FROM users WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.Passwordhash,
		&i.ImageUrl,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, created_at, updated_at, name, email, passwordhash, image_url FROM users WHERE id = ?
`

func (q *Queries) GetUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.Passwordhash,
		&i.ImageUrl,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET updated_at = ?, name = ?, email = ?, passwordhash = ?, image_url = ? WHERE id = ? RETURNING id, created_at, updated_at, name, email, passwordhash, image_url
`

type UpdateUserParams struct {
	UpdatedAt    string
	Name         string
	Email        string
	Passwordhash string
	ImageUrl     sql.NullString
	ID           string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.UpdatedAt,
		arg.Name,
		arg.Email,
		arg.Passwordhash,
		arg.ImageUrl,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.Passwordhash,
		&i.ImageUrl,
	)
	return i, err
}
